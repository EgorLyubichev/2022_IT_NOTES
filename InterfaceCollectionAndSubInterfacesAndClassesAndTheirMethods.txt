/*
- - - Interface SET<E> - - -
public interface Set<E> extends Collection<E>

	All methods:
boolean add(E e)
boolean addAll(Collection<? extends E> c)
void clear()
boolean contains(Object o)
boolean containsAll(Collection<?> c)
boolean equals(Object o)
int hashCode()
boolean isEmpty()
Iterator<E> iterator()
boolean remove(Object o)
boolean removeAll(Collection<?> c)
boolean retainAll(Collection<?> c)
int size()
default Spliterator<E>
Object[] toArray()
<T> T[] toArray(T[] a)
Methods inherited from interface java.util.Collection: parallelStream, removeIf, stream.
Methods inherited from interface java.lang.Iterable: forEach.

- - - Class HashSet - - -
All Implemented Interfaces: Serializable, Cloneable, Iterable<E>, Collection<E>, Set<E>.

- - - Class TreeSet - - -
All Implemented Interfaces: Serializable, Cloneable, Iterable<E>, Collection<E>, NavigableSet<E>, Set<E>, SortedSet<E>.


- - - Interface LIST<E> - - -
public interface List<E> extends Collection<E>

	All methods:
boolean add(E e)
void add(int index, E element)
boolean addAll(Collection<? extends E> c)
boolean addAll(int index, Collection<? extends E> c)
void clear()
boolean contains(Object o)
boolean containsAll(Collection<?> c)
boolean equals(Object o)
E get(int index)
int hashCode()
int indexOf(Object o)
boolean isEmpty()
Iterator<E> iterator()
int lastIndexOf(Object o)
ListIterator<E> listIterator()
ListIterator<E> listIterator(int index)
E remove(int index)
boolean remove(Object o)
boolean removeAll(Collection<?> c)
default void replaceAll(UnaryOperator<E> operator)
boolean retainAll(Collection<?> c)
E set(int index, E element)
int size()
default void sort(Comparator<? super E> c)
default Spliterator<E> spliterator()
List<E> subList(int fromIndex, int toIndex)
Object[] toArray()
<T> T[] toArray(T[] a)
Methods inherited from interface java.util.Collection: parallelStream, removeIf, stream.
Methods inherited from interface java.lang.Iterable: forEach

- - - Interface Queue<E> - - -
public interface Queue<E> extends Collection<E>
There are 3 classes to implement the interface Queue: PriorityQueue, LinkedList & ArrayDeque.

						Summary of Queue methods:
Insert: 	add(e) - Throws exception		offer(e) - Returns special value
Remove: 	remove() - Throws exception		poll() - Returns special value
Examine: 	element() - Throws exception	peek() - Returns special value

Methods inherited from interface java.util.Collection: addAll, clear, contains, containsAll, equals, hashCode, isEmpty, iterator,
parallelStream, remove, removeAll, removeIf, retainAll, size, spliterator, stream, toArray, toArray.
Methods inherited from interface java.lang.Iterable: forEach.

- - - Interface Deque<E> - - -
public interface Deque<E> extends Queue<E>
This interface is implemented in the LinkedList, ArrayDeque classes and the multithreaded LinkedBlockingDeque class.

Summary of Deque methods:
			|		First element (Head)		|		Last Element (Tail)			|
			| Throws exception	| Special value	| Throws exception	| Special value	|
			|																		|
Insert:		| addFirst(e)		| offerFirst(e)	| addLast(e)		| offerLast(e)	|
Remove:		| removeFirst(e)	| pollFirst(e)	| removeLast(e)		| pollLast(e)	|
Examine:	| getFirst()		| peekFirst()	| getLast()			| peekLast(e)	|

This interface extends the Queue interface. When a deque is used as a queue, FIFO (First-In-First-Out) behavior results.
Elements are added at the end of the deque and removed from the beginning.
The methods inherited from the Queue interface are precisely equivalent to Deque methods as indicated in the following table:

	Comparison of Queue and Deque methods:
Queue Method 	| Equivalent Deque Method
				|
add(e)			| addLast(e)
offer(e)		| offerLast(e)
remove()		| removeFirst()
poll()			| pollFirst()
element()		| getFirst()
peek()			| peekFirst()

Deques can also be used as LIFO (Last-In-First-Out) stacks. This interface should be used in preference to the legacy Stack class.
When a deque is used as a stack, elements are pushed and popped from the beginning of the deque.
Stack methods are precisely equivalent to Deque methods as indicated in the table below:

	Comparison of Queue and Deque methods:
Stack Method 	| Equivalent Deque Method
				|
push(e)			| addFirst(e)
pop(e)			| removeFirst(e)
peek()			| peekFirst()
*/

public class QueueExamples{
	public static void main(String[] args){
		Queue<String> queueStr = new LinkedList<String>(){{
			this.add("First Line")
		}};
		queueStr.add("Second Line");
		queueStr.offer("Third Line");
		//Выше показаны три способа добавления объектов в очередь.
		queueStr.remove(); // удаляет первостоящий объект из очереди (по принципу: первый вошёл - первый вышел)
		queueStr.remove("Third Line") // удаляет указанный объект
		queueStr.forEach(System.out::println) // выводит в консоль очередь
		queueStr.clear() // очищает очередь
		// queueStr.element(); - генерирует Exception в случае пустой очереди
		// queueStr.peek(); - возвращает значение null в случае пустой очереди
		
		Queue<String> secondQueue = new LinkedList<>();
        secondQueue.add("One");
        secondQueue.add("Two");
        secondQueue.add("Three");
        secondQueue.add("Four");
        secondQueue.removeIf(s -> s.endsWith("e")); // этот метод удаляет элементы, если они заканчиваются на "е"
		
		//Далее фильтрация будет происходить при помощи стримов.
        // Причем, стрим не удаляет имеющиеся уже в очереди объекты. Он создает на её основе новую очередь,
        // которую при желании можно поместить в новую очередь.
		
		Queue<String> thirdQueue = new LinkedList<String>(){{
            this.offer("Father");
            this.offer("Mother");
            this.offer("Daughter");
            this.offer("Son");
        }};
        thirdQueue.stream().filter(s -> s.endsWith("r")).forEach(System.out::println);
        //стоит обратить внимание, что в данном случае фильтр ОСТАВЛЯЕТ те объекты, кот-е оканчиваются на 'r'.
        
		thirdQueue.stream().filter(s -> !s.endsWith("r")).forEach(System.out::println);
        //'!' - отрицание, меняет ситуацию на противоположную. Все объекты, оканчивающиеся на 'r' были удалены из очереди.
        // Так же следует отметить, что в стримах после фильтра сразу же можно ставить метод forEach.
		
		
		Deque<Integer> stack = new java.util.ArrayDeque<>();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        while(!stack.isEmpty()){
            System.out.println(stack.pop());
        } // мы видим классическую работу deque ('1' вошла первой, вышла последней)

        Deque<Integer> queue = new java.util.ArrayDeque<>();
        queue.offer(11);
        queue.offer(22);
        queue.offer(33);
        while(!queue.isEmpty()){
            System.out.println(queue.poll());
        } // в данном случае из-за использования команд "очереди", числа имеют прямую последовательность FIFO

        //Обратить внимание на использование команд! Для DEQUE добавление - .push, удаление - .pop;
        //                                           Для QUEUE добавление - .offer, удаление - .poll;