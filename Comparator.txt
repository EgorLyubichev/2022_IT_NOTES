Контракт компаратора вывражается в следующем:
	1) отрицательный int (первый объект отрицательный, значит меньше);
	2) положительный int (первый объект положительный, значит больше);
	3) 0 - объекты равны.
	
- - - Interface Comparable - - -
	
	Interface Comparable нужен в случае, если нужно сравнивать объекты целиком.

	I) - - - - - - - - (сравнение по полю id (int))
package interfaceComparabalePackage;

import java.util.Iterator;
import java.util.TreeSet;

class Person implements Comparable<Person>{
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Person{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }

    @Override
    public int compareTo(Person p) {
        int result = getId() - p.getId();
        int value = 0;
        if (result < 0){
            return value = -1;
        }else if(result > 0){
            return value = 1;
        }else{return value = 0;}
    }
}
public class Test {
    public static void main(String[] args) {
        TreeSet<Person> set = new TreeSet<>();
        set.add(new Person(12, "Mike"));
        set.add(new Person(11, "Jake"));

        Iterator<Person> iterator = set.iterator();
        while (iterator.hasNext()){
            System.out.println(iterator.next());
        }
        //Console:
        //Person{id=11, name='Jake'}
        //Person{id=12, name='Mike'}
    }
}
// Без переопределенного интерфейса Comparable treeSet, например, работать не будет, т.к. не знает по каким критериям
// определять сортировку множества.

	II) - - - - - - - - (сравнение по полю name (String))
package interfaceComparabalePackage;

import java.util.Iterator;
import java.util.TreeSet;

class Person implements Comparable<Person>{
    private int id;
    private String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Person{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }

    @Override
    public int compareTo(Person p) {
        return name.compareTo(p.name);
    }
}
public class Test {
    public static void main(String[] args) {
        TreeSet<Person> set = new TreeSet<>();
        set.add(new Person(12, "Mike"));
        set.add(new Person(11, "Jake"));
        set.add(new Person(13, "Albert"));

        Iterator<Person> iterator = set.iterator();
        while (iterator.hasNext()){
            System.out.println(iterator.next());
        }
        //Console:
        //Person{id=11, name='Jake'}
        //Person{id=12, name='Mike'}
    }
}
// Без переопределенного интерфейса Comparable treeSet, например, работать не будет, т.к. не знает по каким критериям
// определять сортировку множества.

- - - Interface Comparator - - -

Существует несколько версий реализации.
Цель - сравнение объектов по какому-либо признаку.

- - - Реализация компаратора как внешнего класса.

package interfaceComparabalePackage;

import java.util.*;

class Person {
    private int id;
    private String name;

    public Person() {
    }

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Person{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }
}
class PersonNameComparator implements Comparator<Person>{

    @Override
    public int compare(Person o1, Person o2) {
        return o1.getName().compareTo(o2.getName());
    }
}
public class Test {
    public static void main(String[] args) {
        ArrayList<Person> list = new ArrayList<>();
        list.add(new Person(34, "Vasia"));
        list.add(new Person(23, "Petia"));
        list.add(new Person(44, "Grisha"));
//1-й вариант вызова компаратора - через метод сорт (он есть у ArrayList), поместив в параметры объект класса,
//где мы определили алгоритм действий компаратора.
        list.sort(new PersonNameComparator());
        System.out.println(list);

//2-й вариант, подтягивать метод sort из класса Collections (java.util)
        Collections.sort(list, new PersonNameComparator());
        System.out.println(list);
    }
}

- - - Реализация компаратора как внутреннего класса

package interfaceComparabalePackage;

import java.util.*;

class Person {
    private int id;
    private String name;

    public Person() {
    }

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Person{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }
/*
Объявляется внутренний статический класс. Вызывается в методе main как обычный внутренний класс(через имя класса, в который он вложен)
*/
    public static class NameComparator implements Comparator<Person> {

        @Override
        public int compare(Person o1, Person o2) {
            return o1.getName().compareTo(o2.getName());
        }
    }
}

public class Test {
    public static void main(String[] args) {
        ArrayList<Person> list = new ArrayList<>();
        list.add(new Person(34, "Vasia"));
        list.add(new Person(23, "Petia"));
        list.add(new Person(44, "Grisha"));

        list.sort(new Person.NameComparator());
        System.out.println(list);


    }
}




