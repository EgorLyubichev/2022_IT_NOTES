Arrays.sort() - для сортировки массивов.
Arrays.toString() - для представления массива в виде строки.
Arrays.copyOf() - для копирования массива (фрагмента массива). При использовании в случае двумерных и более массивов - копирование поверхностное.
Arrays.equals() - при сравнении массивов. Обычный equals будет сравнивать ссылки, а не массивы.

public class Test {
    public static void main(String[] args) {
        int[][] array1 = {{1,2,3},{2,3,4},{3,4,5}};
        int[][] array2 = {{1,2,3},{2,3,4},{3,4,5}};

        System.out.println(Arrays.deepToString(array1));
        System.out.println(Arrays.equals(array1, array2));
        System.out.println(Arrays.deepEquals(array1, array2));
    }
}

Console:
[[1, 2, 3], [2, 3, 4], [3, 4, 5]]
false
true
Arrays.deepToString и Arrays.deepEquals - методы, работающие для двумерных (и более) массивов.

Arrays.fill() - метод для заполнения массива определенным одним значением.
public class Main {
    public static void main(String[] args) {

        int[] a = {1,2,3,4,5};
        Arrays.fill(a, 12);
        System.out.println(Arrays.toString(a));

    }
}
Console: [12, 12, 12, 12, 12]

- - - BinarySearch - - -
Не стоит забывать про метод BinarySearch при поиске элемента, т.к. это более быстрый и легкий способ поиска, нежели искать через for, т.к. неизвестно, насколько далеко может лежать искомый объект.

public class Main {
    public static void main(String[] args) {

        int[] a = {1, 2, 3, 7, 23, 76, 42, 66, 123, 76, 456, 2, 6};
        Arrays.sort(a);
        int index = Arrays.binarySearch(a, 66);
        System.out.println("Index of key --> " + index);
        System.out.println("Key --> " + a[index]);
        
    }
}